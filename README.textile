h1. Chronatog

Chronatog is:

# A simple service providing basic web cron. (lib/server)
# A ruby client implementation for the chronatog.engineyard.com web service. (lib/client, chronatog-client.gemspec)
# An example service demonstrating how to integrate with the EngineYard services API. (lib/ey_integration)
# A gem for use by the internal EngineYard services API implementation, for testing. (chronatog.gemspec)
# This document designed for helping partners get started with the EY services API. (README.textile)

!https://github.com/engineyard/chronatog/raw/master/chronatog.jpg!

h2. Getting Started: Deploying your own Chronatog

h3. Become a Partner

First you need a partner account with EngineYard.  Once you have one, you should be able to login at "https://services.engineyard.com":https://services.engineyard.com.

h3. Save your credentials

In Chronatog, credentials are stored in config/ey_partner_credentials.yml.

Example to generate this file in script/console:

bc.. $ script/console
> Chronatog::EyIntegration.save_creds('ff4d04dbea52c605', 'e301bcb647fc4e9def6dfb416722c583cf3058bc1b516ebb2ac99bccf7ff5c5ea22c112cd75afd28')
=> #<struct Chronatog::EyIntegration::Credentials auth_id="ff4d04dbea52c605", auth_key="e301bcb647fc4e9def6dfb416722c583cf3058bc1b516ebb2ac99bccf7ff5c5ea22c112cd75afd28">

h3. Test your connection

To test your connection to services.engineyard.com, you can make a GET request to the registration url.  This returns a listing of currently registered services.

Example:

bc.. $ script/console
> Chronatog::EyIntegration.connection.list_services(@mock_backend.partner[:registration_url])
=> []

p. Behind the scenes, Chronatog is calling out to @EY::ServicesAPI@.

@list_services@ is a method on @EY::ServicesAPI::Connection@.

h3. Register your services

For the remainder of the setup steps, you will need to have Chronatog running somewhere with a publicly accessible url.

To register your service, you make a POST request to the registration url, passing a JSON body describing your service.  Included in that description are callback URLS, so in order to generate them Chronatog needs to know it's public-facing url.

Example:

bc.. $ script/console
> registration_url = "http://services.engineyard.com/api/1/partners/1/services"
> chronatog_url = "http://chronatog.example.com"
> registered_service = Chronatog::EyIntegration.register_service(registration_url, chronatog_url)
=> #<Chronatog::Server::Service id: 1, name: "Chronatog", state: "registered", url: "http://services.engineyard.com/api/1/partners/1/ser...", created_at: "2011-09-26 14:59:30", updated_at: "2011-09-26 14:59:30">

p. Behind the scene, Chronatog is calling @register_service@ on a @EY::ServicesAPI::Connection@.  The first parameter is the @registration_url@. The second parameter is a hash describing the service being registered.

In the case of this example it looks something like:

bc.. {
  :service_accounts_url     => "http://chronatog.example.com/eyintegration/api/1/customers", 
  :terms_and_conditions_url => "http://chronatog.example.com/terms", 
  :vars                     => ["CHRONOS_AUTH_USERNAME", "CHRONOS_AUTH_PASSWORD", "CHRONOS_SERVICE_URL"], 
  :name                     => "Chronatog", 
  :home_url                 => "http://chronatog.example.com/", 
  :description              => "Web cron as a service."
} 

h3. Viewing your service on cloud.engineyard.com

If your service registration succeeded, you should see it's information displayed when you visit https://services.engineyard.com.  From there you can enable testing of your service with any cloud account you have access to.  If you don't have any cloud accounts, you can create a free trial account at:
https://cloud.engineyard.com/.

Once enabled for testing, you should see your service available if you navigate to "Services" in the menu bar from https://cloud.engineyard.com.

h3. Enabling your service

When you click 'enable', EngineYard will make a call to your callback URL to create a service account.  In the case of Chronatog, this callback is handled by creating a customer record.

With a request that looks like:

bc.. POST "http://chronatog.local/eyintegration/api/1/customers"
{
  :invoices_url => "http://services.engineyard.com/api/1/invoices/???service_account_id???", 
  :messages_url => "http://services.engineyard.com/api/1/messages/???service_account_id???", 
  :name         => "my-account", 
  :url          => "TODO url"
}

p. Chronatog will handle the callback with the implementation defined in @Chronatog::EyIntegration::Application@ as:

bc.. #parse the request
service_account = EY::ServicesAPI::ServiceAccountCreation.from_request(request.body.read)
#create a new customer
customer = service.customers.create!( :name => service_account.name,
      :api_url      => service_account.url,
      :messages_url => service_account.messages_url,
      :invoices_url => service_account.invoices_url)

p. As part of handling the callback, a @Customer@ will be created, looking something like:

bc.. <Chronatog::Server::Customer id: 1, TODO>

p. Chronatog returns a JSON response that tells EngineYard some information about the customer.

bc.. #create a response hash with information about the customer
response_hash = service_account.creation_response_hash do |presenter|
  presenter.configuration_required = false
  presenter.configuration_url = customer.configuration_url(base_url)
  presenter.provisioned_services_url = customer.provisioned_services_url(base_url)
  presenter.url = customer.url(base_url)
  presenter.message = EY::ServicesAPI::Message.new(:message_type => "status", :subject => customer.singup_message)
end
#Set the Content-Type to JSON
content_type :json
#Set the Location header for extra REST (has the same value as response_hash["service_account"]["url"] )
headers 'Location' => customer.url(base_url)
#render the response_hash as json
response_hash.to_json

h3. More

TODO: enabling service makes a callback, Chronatog sends a welcome message.

TODO: clicking configure does SSO.

TODO: disabling service makes a callback, and Chronatog responds by sending a bill.

TODO: provisioning service makes a callback, Chronatog generates API keys.

TODO: provisioned service SSO.

TODO: using those API keys works. Chronatog automatically updates the status to tell the user they are now using the service. Tell them how many jobs are scheduled.

TODO: using the API to create more than 10 jobs on the free plan and Chronatog sends a notification prompting you to upgrade.

TODO: Examining the monthly billing job Chronatog created in itself and forcing it to run.

