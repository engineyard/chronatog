#!/usr/bin/env ruby
require 'rubygems'
require 'bundler'
Bundler.require

require 'erb'
require 'RedCloth'

class Parser

  def snippets
    @snippets ||= {}
  end

  def add(contents)
    parts = contents.split(/(#\{[a-z_]+\{)|(#\}[a-z_]+\}$)/)
    parts.pop
    parts.shift
    start_key = nil
    end_key   = nil
    contents  = nil
    parts.each_with_index do |str, index|
      case index % 4
      when 0 then
        start_key = str.match(/#\{(.*)\{/)[1]
        contents = nil
      when 1 then
        contents = str
        end_key = nil
      when 2 then
        end_key = str.match(/#\}(.*)\}/)[1]
        if start_key == end_key
          snippets[end_key] = clean(contents)
        end
        start_key = nil
      end
    end
  end

  def clean(str)
    whitespace = str.split("\n")[1].match(/^\s+/)[0]
    str.gsub(whitespace, "").strip
  end

  class Snippers
    def initialize(snippets)
      @snippets = snippets
      @unused = @snippets.keys
    end
    def method_missing(method, *ignoredargs)
      key = method.to_s
      raise "No #{key} found, I have #{@snippets.keys.inspect}" unless @snippets.key?(key)
      @unused.delete(key)
      @snippets[key]
    end
    def assert_all_used!
      raise "You forget to use #{@unused.inspect}" unless @unused.empty?
    end
  end

  def snippy
    @snippy ||= Snippers.new(snippets)
  end

end

parser = Parser.new

puts "hold on, I need to run the tests first"

require 'rspec'
result = RSpec::Core::CommandLine.new(["spec"]).run(STDERR, STDOUT)

raise "Fix the specs first" unless result == 0

erb_file_path = File.expand_path("../../README.textile.erb", __FILE__)
textile_file_path = File.expand_path("../../README.textile", __FILE__)
html_file_path = File.expand_path("../../README.html", __FILE__)

Dir[File.expand_path("../../**/**/**/*.rb", __FILE__)].each do |source|
  parser.add(File.read(source))
end
parser.snippets.merge!(DocHelper.snippets)

erbthing = ERB.new(File.read(erb_file_path))

textile = parser.snippy.instance_eval do
  erbthing.result(binding)
end


parser.snippy.assert_all_used!

File.open(textile_file_path, "w") {|fs| fs.write textile}

File.open(html_file_path, "w") do |fs|
  fs.write(%Q{
<style>
a {
    color: #229;
}
pre {
    background: #eef;
    padding: .5em;
}
code {
    background: #eef;
}
</style>
  })
  fs.write RedCloth.new(textile).to_html
end

puts "OK, generated #{html_file_path}, now attempting to open"

`open #{html_file_path}`